                                  INSTALLATION

Unpack the archive in a place convienient for you. If you downloaded 'minimal'
version build parunner (see [RE]BUILDING parunner) and create config.json file
(in the directory to which you unpacked the archive) (see CONFIGURATION).

                                    USAGE
See python dcj.py -h

                            [RE]BUILDING parunner
* Make sure go is installed (installation instructions are on
  https://golang.org/doc/install).
* Build parunner by going to src/parunner/ subdirectory and running

    go build

* Copy executable (parunner file) to executable/ subdirectory:

    cp parunner ../../executable/

                              CONFIGURATION
Configuration is stored in config.json file, located in the directory to which
you unpacked the archive. Some sample configs are provided in sample-configs/
subdirectory.

The configuration file should contain a single object, with the following
fields:
 * c-compiler - command that will be used to compile files written in C.
 * c-compiler-flags - list of flags with which files written in C will be
   compiled.
 * cpp-compiler - command that will be used to compile files written in C++.
 * cpp-compiler-flags - list of flags with which files written in C++ will be
   compiled.
 * parunner-file - name of parunner executable.
You may figure proper values by building and running a simple program using
message library manually (see BUILDING AND RUNNING SOLUTIONS MANUALLY).

                   BUILDING AND RUNNING SOLUTIONS MANUALLY
* If you are using Java or Python:
  * Install SWIG (http://swig.org).
  * Generate wrappers for language of your choice.
    * For Java:

      swig -java src/swig/message.i

    * For Python:

      swig -python src/swig/message.i

* Build message library from

  libraries/message_internal.c
  libraries/zeus_local.c

  and files generated by SWIG.
* Build solution.
* Run the solution using pa runner:

  parunner path-to-built-soluton -n=number-of-simulated-hosts