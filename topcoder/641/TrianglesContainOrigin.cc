#include<bits/stdc++.h>
using namespace std;

using vi = vector<int>;
using ii = pair<int,int>;
using ll = long long;
using llu = unsigned long long;
const int INF = numeric_limits<int>::max();

struct dot {
  int x, y;
  int q;
  int index;
  int sum;
  bool real;
};

class TrianglesContainOrigin {
public:
  long long count(vector <int> x, vector <int> y) {
    vector<dot> dd;
    for (int i = 0; i < x.size(); i++) {
      dot d;
      d.real = true;
      d.x = x[i];
      d.y = y[i];
      d.index = i;
      d.q = 1;
      if ((d.y < 0) || (d.y == 0 && d.x < 0)) {
        d.q +=2;
      }
      if (d.x == 0 || d.x * d.y < 0) {
        swap(d.x, d.y);
        d.q++;
      }
      d.x = abs(d.x);
      d.y = abs(d.y);
      dd.emplace_back(d);
      d.q += 2;
      d.real = false;
      dd.emplace_back(d);
    }

    sort(dd.begin(), dd.end(), [] (const dot &a, const dot &b) {
      if (a.q == b.q) return b.x * a.y < b.y * a.x;
      return a.q < b.q;
    });

    vector<int> back(x.size());

    int sum = 0;

    for (int i = 0; i < dd.size(); i++) {
      // printf("%d (%d, %d) %c\n",
      //  dd[i].q, dd[i].x, dd[i].y, (dd[i].real ? '.' : 'o'));
      if (dd[i].real) {
        sum++;
      } else {
        back[dd[i].index] = i;
      }
      dd[i].sum = sum;
    }

    ll r = 0;
    for (int i = 0; i < dd.size(); i++) {
      if (!dd[i].real) continue;
      for (int j = i + 1; j < dd.size(); j++) {
        if (dd[j].index == dd[i].index) break;
        if (!dd[j].real) continue;
        // cerr << '+' << back[dd[i].index] << ".." << back[dd[j].index] <<
        //  " " << dd[back[dd[j].index]].sum - dd[back[dd[i].index]].sum << endl;
        r += dd[back[dd[j].index]].sum - dd[back[dd[i].index]].sum;
      }
    }

    // printf("------------\n");
    return r;
  }

// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const long long &Expected, const long long &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { int Arr0[] = {-1,-1,1}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {1,-1,0}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); long long Arg2 = 1LL; verify_case(0, Arg2, count(Arg0, Arg1)); }
	void test_case_1() { int Arr0[] = {-1,-1,1,2}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {1,-1,2,-1}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); long long Arg2 = 2LL; verify_case(1, Arg2, count(Arg0, Arg1)); }
	void test_case_2() { int Arr0[] = {-1,-2,3,3,2,1}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {-2,-1,1,2,3,3}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); long long Arg2 = 8LL; verify_case(2, Arg2, count(Arg0, Arg1)); }
	void test_case_3() { int Arr0[] = {1,5,10,5,-5,7,-9,-6,-3,0,8,8,1,-4,7,-3,10,9,-6}; vector <int> Arg0(Arr0, Arr0 + (sizeof(Arr0) / sizeof(Arr0[0]))); int Arr1[] = {5,-6,-3,4,-2,-8,-7,2,7,4,2,0,-4,-8,7,5,-5,-2,-9}; vector <int> Arg1(Arr1, Arr1 + (sizeof(Arr1) / sizeof(Arr1[0]))); long long Arg2 = 256LL; verify_case(3, Arg2, count(Arg0, Arg1)); }

// END CUT HERE
;
};

// BEGIN CUT HERE
int main() {
  TrianglesContainOrigin ___test;
  //___test.run_test(-1);
//   cerr << ___test.count({1, 0, -1, 0},
//     {0, 1, 0, -1})
// << endl;
// return 0;
  cout << ___test.count({832, 868, 71, -21, -951, -902, 1000, -94, -892, -90, -473, 914, 879, 813, -473, 98, 604, 56, -893, -851, -8, 854, 696, 37, -873, -45, 542, -87, 847, -816, 950, -996, 616, -889, 938, 642, 876, 968, 891, 566, 681, -478, -15, 509, 835, -932, 823, -860, -847, 918, 911, 838, -887, -44, 565, -838, 94, 542, -859, -49, -59, 962, 622, 673, -70, 954, -995, 830, 44, 801, 943, -336, 574, 31, -68, 846, 566, -333, -6, -955, 650, -935, 981, 677, 978, 997, 669, -92, 561, -48, 927, -40, -19, -930, 538, 800, -465, 14, -91, -32, 21, 814, 820, 656, 509, -16, 68, -478, -57, -60, -34, 594, 23, -881, 905, 987, -83, 878, -487, -374, -917, -872, 72, -904, 881, 978, 926, -80, -419, -854, 23, 506, -801, 573, -335, -944, 895, -18, -815, -7, -93, -1, 551, -100, 578, -348, 974, -845, -66, -85, 87, -960, -433, -895, -444, -64, 76, -336, 977, 52, 659, 869, 971, -85, -871, 836, 26, -947, -896, -2, 89, -963, -810, 518, -388, -990, 853, -984, -390, -974, -42, -965, -963, -908, 982, -14, 912, 845, 6, -970, 629, 816, 952, 997, -919, -81, 51, 976, 7, -899, -916, -844, -841, -471, 833, 545, 517, 884, -432, -861, 51, -867, 99, 848, 946, -869, 500, 826, -823, -499, -828, -92, 94, -820, -96, -96, 675, 661, 960, 819, -402, 674, 911, 55, 11, -28, 605, 63, 861, 999, 624, 857, -986, 627, 561, -933, 77, -493, 958, -875, -808, -42, 975, 613, 45, -969, -839, 907, 900, 913, -865, -392, -828, 970, -74, -352, 682, 93, 524, 581, 6, -954, 856, -931, -929, -879, 829, -47, 88, -63, -857, -499, -33, -829, 924, 58, -419, -866, 889, 970, -319, 956, -30, -62, 17, -77, -404, -37, 680, 995, -34, 858, 32, 973, 60, -27, -82, -19, -36, -904, -973, 912, 872, 816, 812, -962, -424, -490, 855, 850, 886, -808, 75, -68, 936, 90, -942, 559, -999, 818, -417, -80, -870, -40, -426, -24, 843, 22, -99, -487, 883, 4, -37, -72, -362, 82, 43, -800, 10, -41, 856, 958, 534, -988, 648, 813, -425, -67, 570, 827, -804, 74, 67, -979, 66, -420, -973, 66, 839, -444, 993, -3, -52, 900, 571, -891, 72, 525, -929, 682, 35, -881, -6, 804, -827, 49, 34, 1000, 524, -949, 80, 835, -8, 64, -964, -886, -95, -41, 27, -372, -921, -836, -47, -965, -369, 620, 59, -983, 564, -465, 26, 862, -44, -906, -322, -22, -94, -803, 29, -25, 95, 914, 933, 646, 100, -985, -811, -485, 955, -872, 910, 840, -815, 821, -954, -67, 979, 591, 599, -988, -821, 879, -332, 976, -28, -873, 922, 871, 560, -969, -984, -917, 689, -10, -418, -972, -2, 580, 655, -827, 563, 579, -90, -11, -804, -915, -868, 49, -18, 569, -960, 0, -975, 836, 44, -893, 506, -79, 969, -471, -74, 872, -996, 890, 934, 834, 957, 961, -456, 551, -829, 41, 942, 985, 907, -935, -847, -384, -81, 53, 79, -913, -923, -832, 984, -998, -920, -807, -390, -851, 83, -825, -77, 40, 81, -72, -381, 878, 882, -52, -441, 844, -26, 934, -55, 801, -489, 941, 7, 880, -939, -817, -357, 95, 676, 838, -902, 980, 807, 42, 600, -75, -945, -898, -850, 844, 99, -53, 886, -87, 541, 944, -823, 815, -809, -95, -45, -443, -29, -43, -61, -389, -350, -412, -989, -21, -819, -879, 852, 626, -383, -434, 69, 93, -959, 80, -928, 571, -461, -5, 87, 81, -489, 915, -488, 43, -974, -441, 55, 5, -867, -837, 994, -968, 840, 848, -951, 48, -912, -86, -970, 25, -924, 92, -386, 33, -915, -50, -461, -910, 643, -439, -844, 885, -892, 75, -325, -801, -884, -29, -322, 679, -46, 969, -934, 853, 821, 868, -968, 663, 871, 564, 65, -88, -58, -946, 906, -811, 14, 803, 9, -97, -945, 834, -65, 577, 903, 850, 74, 9, 697, -994, 62, 845, -911, 977, -855, 954, -888, -23, 990, 100, -86, -43, 824, 910, 942, 999, 522, -800, -69, 27, 897, -14, 57, 530, 949, -836, 904, -894, 920, -59, -66, 874, 995, -20, 658, 13, 97, -78, -10, 22, 806, 823, -89, 950, -51, 58, -862, -82, 890, -901, -896, 61, -36, -989, -63, 857, -466, 5, 941, 619, -916, -39, -848, 992, 636, 894, -942, -58, -831, -349, -982, 837, 563, -924, 996, -457, 45, 89, 985, -99, -972, -884, -326, 47, 924, -93, -26, 98, 983, 68, 903, 843, -429, -938, -75, -319, 24, -876, 64, 63, -961, 876, -453, 919, -838, -442, 944, -38, 19, -835, -57, -11, -88, -450, 42, 904, -802, -376, 957, 882, 552, 990, 817, -3, 607, -888, 28, -903, 973, -864, 922, 20, 812, 964, 804, 908, 869, 996, 964, -320, 69, 663, -56, -328, -849, -840, -818, -470, -958, 981, -946, 40, -934, 963, 73, -905, 943, -977, 614, -55, -843, 92, 828, 818, -17, 809, 10, -807, 516, 508, 634, -889, -426, -432, 982, 695, 972, 905, -854, -483, 901, -817, 67, -966, -331, -33, -302, -32, 822, -825, 15, -868, -54, -17, 15, -23, 24, 880, -810, 33, 989, -940, 619, -15, -877, 608, 933, -53, 864, -357, 991, -300, 38, -16, 31, 829, -24, 831, 980, 59, -846, 76, -48, -869, -304, 57, 647, -481, -27, 56, 30, -494, -834, -947, 992, -895, -12, -962, 817, -464, -803, 91, -983, 513, 577, 628, -423, 693, -982, -340, -832, -400, -890, 552, -25, 984, 896, 889, 906, 83, 11, 589, 819, 70, -995, -837, -936, 917, 951, 609, -316, 808, 65, -876, 73, 13, 827, -84, 4, 82, -375, 91, -855, -326, 77, -358, 29, 683, -956, 839, 967, -955, 47, 1, -100, 17, 991, 828, 952, 507, 994, -302, -76, -84, -361, 842, 673, -485, 86, -73, 852, 562, 522, -986, 824, -89, 894, -70, 967, 88, -51, -959, 915, -330, 887, 939, 680, -912, -920, 71, 987, -861, -863, -20, 686, -482, 923, 919, -54, 53, 921, -62, -975, -60, -923, -913, 3},
    {990, -810, -531, 607, -828, -883, -840, 636, 861, -414, -28, 904, 981, -894, 9, -41, 79, 683, 931, -957, -402, 961, -47, 787, 912, 777, 84, -491, -895, -842, -983, 849, -48, -848, -879, 16, -973, -915, 838, -25, 52, 8, -510, -9, -973, -999, 828, -806, 913, -943, 919, 871, 810, 794, -8, -895, 754, -18, -960, 729, 676, 801, 19, -37, -440, 834, 837, -953, 754, 1000, 959, 63, -60, 757, 601, 904, -11, 89, 610, -882, 10, 900, 881, -84, 976, -945, 31, -49, 73, -70, -896, 19, -443, -898, -1, 908, 17, -36, -578, -45, 612, -911, -947, 64, 2, 679, -508, -79, 630, -9, -445, 39, -517, -866, -811, -952, 711, 975, 42, -18, -849, -992, 703, -904, 966, -963, 832, -15, 79, -873, -428, -76, 993, 61, 26, 877, -838, 712, -914, 726, 641, 643, -55, 608, 68, -2, -910, -934, 661, -75, 700, 822, 71, -813, -29, 668, 67, 16, 985, -547, 89, -816, -954, 55, -848, -985, -512, -823, 925, 766, 794, -815, 822, -72, 21, 892, -975, -971, -26, 845, 36, 959, -836, -922, -832, 713, -849, -932, 657, 969, 32, -910, -858, 942, 963, 720, -593, 938, -459, 890, 831, -875, -989, -58, 885, 62, 92, -994, -32, -997, -92, -956, -596, 980, -818, 900, -97, -941, 984, 78, 907, 27, 634, -802, 738, -566, -38, 75, -939, 864, -85, 78, 853, -502, -569, 96, 45, 678, 951, 833, -3, 851, 971, -3, -28, -845, -516, -66, 867, -962, 924, 38, -891, 51, -71, 923, -968, 997, 866, -933, -885, -31, 891, 832, -482, 7, -90, 13, 67, -74, -476, 882, 842, 871, -893, 940, -993, 791, 724, 758, -800, 68, 783, 897, 813, -487, -62, -809, 840, -961, -61, 803, 73, -563, 80, -436, 85, -526, 72, -989, -416, 968, 57, 827, -5, -79, -90, 800, 778, -994, -823, 829, -1000, 921, 987, -819, -81, 34, -830, 842, 811, -889, -515, 762, -892, -573, -913, 12, 955, 880, 55, -479, 837, -421, -88, -566, -898, 787, -511, -64, 877, -552, -466, 93, -61, 767, 684, 938, 614, 5, 984, -963, 50, 845, -83, 846, 93, 44, 99, -853, -965, 689, -437, 913, -449, -57, 999, -438, -940, -71, 964, -98, 90, -820, -69, 827, 705, -47, 927, -52, 600, -918, -89, -817, 934, 37, -582, -897, 46, -852, -46, 878, 646, 676, 922, 953, -50, 728, -36, 25, 901, -975, 94, 836, -60, -96, 630, 830, -27, -95, 711, 909, -17, 972, 97, 734, -502, 872, 686, 663, 674, -956, 803, 63, 31, -802, 967, -65, 807, 853, 966, -853, 914, 973, -896, 739, 982, -63, -100, -990, 805, -860, 12, 998, 795, 978, -886, 972, -95, 920, -914, 993, 17, 678, 70, -879, 39, 5, -64, 809, 44, 40, -24, -473, 943, 940, 979, -529, -87, -56, 808, 682, 863, 848, -490, -807, -53, 642, -857, 33, -583, 829, -829, 816, -901, -872, -845, -977, 41, -58, -948, -534, 841, -982, -875, -833, -934, 40, -432, 725, -73, 828, 955, -972, -893, 949, -980, 957, 2, 925, 609, 933, 775, -563, 62, -530, 47, 917, 807, 668, -100, -918, 727, 986, 622, -887, 26, 973, 11, -821, 811, -811, 98, 626, -26, 960, -856, 888, -921, -435, 66, 712, 987, 873, 890, -969, -570, -567, 800, 785, 36, 872, -947, 942, -858, 1, -542, -30, -528, -406, 27, 43, -1, 76, -945, 714, -977, 819, -1000, -59, -94, -54, -93, -460, -870, -482, -835, -35, 87, -496, -443, 798, 1, -974, -39, 74, -840, 54, -599, 644, 812, 852, -889, -863, 831, -841, -901, 739, 961, 779, 882, -525, -803, 693, 76, 623, -968, -553, -78, 883, -92, 42, 958, -814, -861, 708, -89, -946, 883, -496, 28, -82, -493, -908, -830, 929, 905, -846, 846, 77, -979, 96, -72, -35, 639, -851, 945, -827, -459, -924, 666, 727, 808, 964, -23, 34, 921, 932, -522, 626, 56, -824, 730, 880, 874, 997, 989, 819, 852, 702, 899, 83, -75, -31, 834, 815, 814, -969, 65, -967, -523, 604, -847, -420, 763, 88, 823, 991, 975, 815, 929, 673, -472, -972, 870, 709, 49, -503, 86, 663, 766, -494, 891, -809, 23, -913, -465, -434, 810, 51, -892, 934, 918, -45, 41, -873, -574, -915, -77, 4, -851, -91, 851, 680, 978, -865, -91, 945, 836, -463, -993, 100, -905, -877, 50, -907, 903, -38, 64, -581, 947, -44, -880, 962, 75, -65, -822, 648, 741, 35, 949, -527, -801, 823, -62, -844, -73, 95, -532, 906, -561, -93, -962, 918, -41, 991, 935, 97, -958, 729, 703, -829, 674, 767, 8, 99, -578, 907, -832, -33, 977, -807, -67, -827, -920, -464, -13, -933, -415, 860, 861, 892, -803, 728, -954, -987, -903, 905, 814, -960, 924, 57, -88, 92, 59, 74, -922, -890, -996, 77, 1000, 954, 812, -458, 826, 932, 686, -979, -818, 982, -27, 66, 952, -506, 962, -880, 98, -877, 35, -839, -63, -14, -96, 820, -16, -44, -844, 94, 977, -983, 926, 52, 805, -899, 90, 833, 3, -402, -97, -522, -846, 980, 601, 860, -465, -82, 664, -550, 660, -891, 826, 29, -800, -916, -29, 671, 920, 70, 968, -455, 840, -56, -946, 0, -48, -587, -414, 844, 756, -961, -887, -448, -817, 779, -10, 864, 56, 29, -74, -69, -559, -555, -81, -5, 915, -838, 969, -949, -510, 979, 854, -85, -903, 10, -976, 25, 81, 71, 58, -78, -971, 13, 971, 59, -929, -76, -417, -935, -831, 878, 824, -535, -15, 6, 847, 776, -816, 884, 843, -967, -881, 95, -40, -997, -446, 953, 664, -571, -894, 84, -480, 46, 20, -468, 985, -59, -493, -16, 775, -57, 824, -917, 862, -822, -449, -572, 759, 693, -831, -801, -888, 14, -925, 7, 782, -87, 6, -828, -6, 30, -434, 702, -839, -98, -55, 951, -852, 100, 855, 691, -864, 681, -597, 967, -959, -46, 981, 943, -70, -996, -927, 731, 813, -965, -990, -574, -66, -42, -812, -926, 763, -14, -870, -584, 894, -33, -958, 926, 732})
<< endl;
}
// END CUT HERE
