#include <vector>
#include <iostream>
#include <algorithm>

using namespace std;

class NarrowPassage {
public:
    int minDist(int L, vector <int>a, vector <int>b) {
        vector<pair<int,int>> w;
        for (int i = 0; i < a.size(); i++) {
            w.push_back(make_pair(a[i], b[i]));
        }
        w.push_back(make_pair(0, 0));
        w.push_back(make_pair(L, L));
        sort(w.begin(), w.end());
        vector<int> u(w.size());
        for (int i = 0; i < u.size(); i++) u[i] = i;

        for (int i = 0; i < w.size(); i++)
        for (int j = i + 1; j < w.size(); j++) {
            if (w[i].second > w[j].second) {
                u[i] = u[j] = min(u[i], u[j]);
            }
        }
        int best = -1;
        for (auto i : u) cout << i << endl;

        cout << "---" << endl;

        for (int i = 0; i < u.size(); i++) {
            if (u[i] != i) continue;
            int to_left = 0, to_right = w.size();
            for (int j = i - 1; j > 0; j--) {
                if (u[j] == u[j-1]) {
                    to_left = j + 1;
                    break;
                }
            }
            for (int j = i; j < w.size() - 1; j++) {
                if (u[j] == u[j+1]) {
                    to_right = j;
                    break;
                }
            }
            int t = 0;
            for (int j = 0; j < to_left; j++) {
                t += w[j].first + w[j].second;
            }
            for (int j = to_left; j < to_right; j++) {
                t += abs(w[j].first - w[j].second);
            }
            for (int j = to_right; j < w.size(); j++) {
                t += (L - w[j].first) + (L - w[j].second);
            }
            cout << "? " << t << endl;
            if (t < best || best == -1) best = t;
        }
        return best;
    }
};

int main() {
    NarrowPassage o;
    cout << o.minDist(5,{1, 2},{3, 4}) << endl;
    cout << o.minDist(10, {3, 9},{8, 6}) << endl;
    cout << o.minDist(
    265467,
{133548, 103861, 29821, 199848, 92684, 219824, 215859, 62821, 172409, 109235,
38563, 148854, 24742, 174068, 205005, 75922, 87316, 5542, 57484, 40792,
25229, 152216, 21547, 22203, 84712, 231522, 235703, 184895, 100787, 174440,
156904, 84898, 185568, 108732, 260098, 89488, 221604, 104555, 165775, 90444,
81952, 149671, 209674, 22185, 45420, 41928, 16098, 65324, 90870, 35243},
{150289, 135139, 69841, 227226, 177427, 230314, 199175, 81572, 220468, 151049,
40009, 145963, 115246, 252932, 263651, 38434, 120096, 69576, 29789, 115046,
33310, 260771, 5723, 80733, 107864, 142447, 235490, 242149, 124564, 134602,
245962, 7078, 215816, 219864, 190499, 210237, 212894, 142760, 126472, 201935,
119308, 120211, 235235, 19446, 87314, 17286, 61990, 102050, 261812, 257}) << endl;

    cout << o.minDist(1000000,
{706292, 756214, 490048, 228791, 567805, 353900, 640393, 562496, 217533, 934149,
938644, 127480, 777134, 999144, 41485, 544051, 417987, 767415, 971662, 959022,
670563, 34065, 518183, 750574, 546576, 207758, 159932, 429345, 670513, 271901,
476062, 392721, 774733, 502586, 915436, 120280, 951729, 699859, 581770, 268966,
79392, 888601, 378829, 350198, 939459, 644983, 605862, 721305, 269232, 137587},
{322468, 673534, 83223, 551733, 341310, 485064, 885415, 927526, 159402, 28144,
441619, 305530, 883149, 413745, 932694, 214862, 677401, 104356, 836580, 300580,
409942, 748444, 744205, 119051, 999286, 462508, 984346, 887773, 856655, 245559,
418763, 840266, 999775, 962927, 779570, 488394, 760591, 326325, 206948, 13999,
285467, 401562, 786209, 169847, 171326, 2901, 296531, 572035, 364920, 939046}) << endl;
}
