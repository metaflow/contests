#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <queue>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory>

using namespace std;

using vi = vector<int>;
using ii = pair<int,int>;
using ll = long long;
using llu = unsigned long long;
const int INF = numeric_limits<int>::max();

class ChocolateDividingEasy {
private:
  vector<vector<int>> m;
  int sum(int x1, int y1, int x2, int y2) {
    x1--;
    y1--;
    return m[x2][y2] - m[x1][y2] - m[x2][y1] + m[x1][y1];
  }
public:
  int findBest(vector <string> chocolate) {
    ll i, j, h, w;
    m.clear();
    h = chocolate.size();
    w = chocolate[0].size();
    m.resize(h + 1);
    for (i = 0; i <= h; i++) {
      m[i].resize(w + 1);
      if (i == 0) continue;
      for (j = 1; j <= w; j++) {
        m[i][j] = (chocolate[i - 1][j - 1] - '0');
        m[i][j] += m[i-1][j] + m[i][j - 1] - m[i - 1][j - 1];
      }
    }
    int best = 0;
    for (ll x1 = 1; x1 <= h; x1++)
    for (ll x2 = x1 + 1; x2 <= h; x2++)
    for (ll y1 = 1; y1 <= w; y1++)
    for (ll y2 = y1 + 1; y2 <= w; y2++) {
      int t = sum(1,1,x1,y1);
      t = min(t, sum(1,y1+1,x1, y2));
      t = min(t, sum(1,y2+1,x1, w));

      t = min(t, sum(x1+1,1,x2,y1));
      t = min(t, sum(x1+1,y1+1,x2, y2));
      t = min(t, sum(x1+1,y2+1,x2, w));

      t = min(t, sum(x2+1,1,h,y1));
      t = min(t, sum(x2+1,y1+1,h, y2));
      t = min(t, sum(x2+1,y2+1,h, w));
      best = max(best, t);
    }
    return best;
  }
};

int main() {
  ChocolateDividingEasy c;
  cout << c.findBest({
"9768",
"6767",
"5313"
}) << endl;

  cout << c.findBest({
"36753562",
"91270936",
"06261879",
"20237592",
"28973612",
"93194784"
}) << endl;

  cout << c.findBest({
"012",
"345",
"678"
}) << endl;

  cout << c.findBest({
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111",
"1111111111111111111111111111111111111111111111111"
}) << endl;
}
