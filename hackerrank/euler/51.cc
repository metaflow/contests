#include<bits/stdc++.h>
using namespace std;

using vi = vector<int>; using vvi = vector<vi>;
using ii = pair<int,int>; using vii = vector<ii>;
using l = long long; using vl = vector<l>; using vvl = vector<vl>;
using ll = pair<l,l>; using vll = vector<ll>; using vvll = vector<vll>;
using lu = unsigned long long;
using vb = vector<bool>; using vvb = vector<vb>;
using vd = vector<double>; using vvd = vector<vd>;
const int INF = numeric_limits<int>::max();
const double EPS = 1e-10;
const l e5 = 100000, e6 = 1000000, e7 = 10000000, e9 = 1000000000;

const l MAX_PRIME = e7;
vl sieve_primes() {
  bitset<MAX_PRIME + 1> b;
  vl primes;
  primes.emplace_back(2);
  for (l i = 3; i <= MAX_PRIME; i += 2) {
    if (b[i]) continue;
    primes.emplace_back(i);
    for (l j = i * i; j <= MAX_PRIME; j += i) b.set(j);
  }
  return primes;
}

// (base^power) % mod, safe for l near max
l powl(l base, l power) {
  l r = 1;
  while (power) {
    if (power % 2) r = r * base;
    base = base * base;
    power /= 2;
  }
  return r;
}

l bit_count(l i) {
  l count = 0;
  while (i) {
    if (i & 1) count++;
    i = i >> 1;
  }
  return count;
}

void generate() {
  auto primes = sieve_primes();
  for (l N = 2; N < 8; N++)
  for (l K = 1; K <= N; K++)
  for (l L = 1; L <= 8; L++) {
  map<l, set<int>> buckets;
  l from = powl(10, N - 1);
  l to = powl(10, N);
  // cout << from << ".." << to << endl;
  for (l mask = 0; mask < (1u << N); mask++) {
    if (bit_count(mask) != K) continue;
    // cout << mask << ":" << endl;
    for (auto prime : primes) {
      if (prime < from) continue;
      if (prime >= to) break;
      l t = prime;
      l d = -1;
      l q = 0;
      for (l i = 0; i < N; i++) {
        if (mask & (1u << i)) {
          l x = t % 10;
          if (d != -1 && d != x) { d = -2; } else { d = x; }
        } else {
          q += t % 10;
        }
        t /= 10;
        q *= 10;
      }
      if (d >= 0) buckets[(q << N) + mask].insert(prime);
    }
  }
  l best_q = -1, smallest_prime = INF;
  for (auto m : buckets) {
    // for (auto i : m.second) cout << i << " ";
    // cout << endl;
    if (m.second.size() < L) continue;
    if (*m.second.begin() >= smallest_prime) continue;
    smallest_prime = *m.second.begin();
    best_q = m.first;
  }
  if (best_q != -1) {
    cout << "answer[" << N << "][" << K << "][" << L << "] = \"";
    auto j = buckets[best_q].begin();
    for (l i = 0; i < L; i++) {
      if (i) cout << " ";
      cout << *j;
      j++;
    }
    cout << "\";" << endl;
  }
}
}

int main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  // generate();
  map<int, map<int, map<int, string>>> answer;
  answer[2][1][1] = "11";
  answer[2][1][2] = "11 13";
  answer[2][1][3] = "11 13 17";
  answer[2][1][4] = "11 13 17 19";
  answer[2][1][5] = "11 31 41 61 71";
  answer[2][1][6] = "13 23 43 53 73 83";
  answer[2][2][1] = "11";
  answer[3][1][1] = "101";
  answer[3][1][2] = "101 103";
  answer[3][1][3] = "101 103 107";
  answer[3][1][4] = "101 103 107 109";
  answer[3][1][5] = "101 131 151 181 191";
  answer[3][1][6] = "107 127 137 157 167 197";
  answer[3][2][1] = "101";
  answer[3][2][2] = "113 223";
  answer[3][2][3] = "113 223 443";
  answer[3][2][4] = "113 223 443 773";
  answer[3][2][5] = "113 223 443 773 883";
  answer[4][1][1] = "1009";
  answer[4][1][2] = "1009 5009";
  answer[4][1][3] = "1009 5009 8009";
  answer[4][1][4] = "1009 1019 1039 1049";
  answer[4][1][5] = "1009 1019 1039 1049 1069";
  answer[4][1][6] = "1123 1223 1423 1523 1723 1823";
  answer[4][2][1] = "1009";
  answer[4][2][2] = "1009 1229";
  answer[4][2][3] = "1009 1229 1559";
  answer[4][2][4] = "1009 1229 1559 1669";
  answer[4][2][5] = "1009 1229 1559 1669 1889";
  answer[4][2][6] = "1009 1229 1559 1669 1889 1999";
  answer[4][3][1] = "1117";
  answer[4][3][2] = "1117 4447";
  answer[4][3][3] = "1117 4447 5557";
  answer[4][3][4] = "1117 4447 5557 8887";
  answer[5][1][1] = "10007";
  answer[5][1][2] = "10007 10009";
  answer[5][1][3] = "10007 10037 10067";
  answer[5][1][4] = "10007 12007 13007 16007";
  answer[5][1][5] = "10009 10039 10069 10079 10099";
  answer[5][1][6] = "10177 20177 40177 50177 70177 80177";
  answer[5][2][1] = "10007";
  answer[5][2][2] = "10007 10337";
  answer[5][2][3] = "10007 10337 10667";
  answer[5][2][4] = "10007 13037 16067 17077";
  answer[5][2][5] = "10037 13337 14437 17737 19937";
  answer[5][2][6] = "10061 11161 14461 16661 17761 19961";
  answer[5][2][7] = "56003 56113 56333 56443 56663 56773 56993";
  answer[5][3][1] = "10007";
  answer[5][3][2] = "10007 11117";
  answer[5][3][3] = "10007 11117 12227";
  answer[5][3][4] = "10007 11117 12227 13337";
  answer[5][3][5] = "10007 11117 12227 13337 14447";
  answer[5][3][6] = "10007 11117 12227 13337 14447 19997";
  answer[5][3][7] = "90007 92227 93337 94447 96667 97777 98887";
  answer[5][4][1] = "10111";
  answer[5][4][2] = "11113 77773";
  answer[5][4][3] = "11113 77773 88883";
  answer[6][1][1] = "100003";
  answer[6][1][2] = "100003 200003";
  answer[6][1][3] = "100003 100103 100403";
  answer[6][1][4] = "100003 100103 100403 100703";
  answer[6][1][5] = "100069 100169 100469 100669 100769";
  answer[6][1][6] = "100237 200237 400237 500237 700237 800237";
  answer[6][1][7] = "160627 161627 163627 164627 166627 167627 169627";
  answer[6][2][1] = "100003";
  answer[6][2][2] = "100003 100333";
  answer[6][2][3] = "100003 102203 105503";
  answer[6][2][4] = "100003 102203 105503 108803";
  answer[6][2][5] = "100003 102203 105503 108803 109903";
  answer[6][2][6] = "100019 101119 103319 106619 107719 109919";
  answer[6][2][7] = "205201 225221 235231 255251 265261 285281 295291";
  answer[6][3][1] = "100003";
  answer[6][3][2] = "100003 101113";
  answer[6][3][3] = "100003 101113 103333";
  answer[6][3][4] = "100003 101113 103333 106663";
  answer[6][3][5] = "100003 101113 103333 106663 107773";
  answer[6][3][6] = "100003 101113 103333 106663 107773 108883";
  answer[6][3][7] = "111109 222109 444109 555109 666109 777109 888109";
  answer[6][3][8] = "121313 222323 323333 424343 525353 626363 828383 929393";
  answer[6][4][1] = "100003";
  answer[6][4][2] = "101111 103333";
  answer[6][4][3] = "101111 103333 107777";
  answer[6][4][4] = "111119 331339 441449 991999";
  answer[6][4][5] = "114113 334333 444443 664663 774773";
  answer[6][5][1] = "101111";
  answer[6][5][2] = "111119 444449";
  answer[6][5][3] = "111211 333233 777277";
  answer[6][5][4] = "333337 555557 666667 888887";
  answer[7][1][1] = "1000003";
  answer[7][1][2] = "1000003 2000003";
  answer[7][1][3] = "1000003 2000003 7000003";
  answer[7][1][4] = "1000003 1001003 1003003 1006003";
  answer[7][1][5] = "1000193 1003193 1006193 1008193 1009193";
  answer[7][1][6] = "1002347 1202347 1302347 1602347 1802347 1902347";
  answer[7][1][7] = "1033777 1133777 1333777 1433777 1633777 1733777 1933777";
  answer[7][2][1] = "1000003";
  answer[7][2][2] = "1000003 1000333";
  answer[7][2][3] = "1000003 1020023 1030033";
  answer[7][2][4] = "1000003 1020023 1030033 1050053";
  answer[7][2][5] = "1000003 1020023 1030033 1050053 1080083";
  answer[7][2][6] = "1000033 1200233 1300333 1500533 1600633 1800833";
  answer[7][2][7] = "2013079 2213279 2313379 2513579 2613679 2813879 2913979";
  answer[7][3][1] = "1000003";
  answer[7][3][2] = "1000003 1005553";
  answer[7][3][3] = "1000003 1005553 1009993";
  answer[7][3][4] = "1000003 1011013 1033033 1066063";
  answer[7][3][5] = "1000003 1110103 1220203 1440403 1550503";
  answer[7][3][6] = "1000003 1110103 1220203 1440403 1550503 1880803";
  answer[7][3][7] = "1017011 2027021 3037031 4047041 5057051 7077071 8087081";
  answer[7][3][8] = "2090021 2191121 2292221 2494421 2595521 2696621 2898821 2999921";
  answer[7][4][1] = "1000003";
  answer[7][4][2] = "1000003 1044443";
  answer[7][4][3] = "1000003 1440443 1660663";
  answer[7][4][4] = "1000003 1440443 1660663 1770773";
  answer[7][4][5] = "1001003 1221223 1331333 1661663 1991993";
  answer[7][4][6] = "2422027 3433037 5455057 6466067 8488087 9499097";
  answer[7][5][1] = "1000003";
  answer[7][5][2] = "1000003 1555553";
  answer[7][5][3] = "1000003 1555553 1999993";
  answer[7][5][4] = "1111183 3333383 4444483 6666683";
  answer[7][6][1] = "1111151";
  answer[7][6][2] = "1111181 3333383";
  answer[7][6][3] = "1111211 3333233 9999299";
  l N, K, L;
  while (cin >> N >> K >> L) {
    cout << answer[N][K][L] << endl;
  }
}
