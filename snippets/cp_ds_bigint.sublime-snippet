<snippet>
  <!-- Example: Hello, ${1:this} is a ${2:snippet}. -->
  <content><![CDATA[
struct bigint {
  static const l BUCKET = 1000;
  static const int BUCKET_DIGITS = 3;
  vl buckets;
  // constructors
  bigint() {}
  bigint(l a) {
    buckets.emplace_back(a);
    normalize();
  }
  bigint(const bigint& n) { buckets = n.buckets; }
  bigint(bigint&& n) : bigint() { swap(*this, n); }
  friend void swap(bigint& first, bigint& second) {
    swap(first.buckets, second.buckets);
  }
  // assignment
  bigint& operator = (l a) {
    buckets.clear();
    buckets.emplace_back(a);
    normalize();
    return *this;
  }
  bigint& operator = (bigint rhs) {
    swap(*this, rhs);
    return *this;
  }
  // utility
  void normalize() {
    size_t i = 0;
    while (i < buckets.size()) {
      l t = buckets[i] / BUCKET;
      if (t) {
        if (i + 1 == buckets.size()) buckets.resize(i + 2);
        buckets[i + 1] += t;
        buckets[i] %= BUCKET;
      }
      i++;
    }
  }
  size_t size() {
    if (buckets.empty()) return 0;
    size_t r = BUCKET_DIGITS * (buckets.size() - 1) + 1;
    l b = buckets.back();
    while (b >= 10) {
      r++;
      b /= 10;
    }
    return r;
  }
  friend ostream& operator << (ostream& s, bigint& n) {
    for (auto i = n.buckets.rbegin(); i != n.buckets.rend(); i++) {
      s << *i << setw(BUCKET_DIGITS) << setfill('0');
    }
    s << setw(0);
    return s;
  }
  // +
  friend bigint operator + (bigint lhs, const bigint &rhs) {
    lhs += rhs;
    return lhs;
  }
  bigint& operator += (const bigint& rhs) {
    size_t n = rhs.buckets.size();
    if (n > buckets.size()) buckets.resize(n);
    for (size_t i = 0; i < min(buckets.size(), n); i++) {
      buckets[i] += rhs.buckets[i];
    }
    normalize();
    return *this;
  }
  bigint& operator += (const l n) {
    buckets[0] += n;
    normalize();
    return *this;
  }
  friend bigint operator + (bigint lhs, const l &rhs) {
    lhs += rhs;
    return lhs;
  }
  // *
  bigint& operator *= (const l n) {
    for (size_t i = 0; i < buckets.size(); i++) {
      buckets[i] *= n;
    }
    normalize();
    return *this;
  }
  friend bigint operator * (bigint lhs, const l &rhs) {
    lhs *= rhs;
    return lhs;
  }
  bigint& operator *= (const bigint& rhs) {
    bigint c = *this;
    buckets.clear();
    for (size_t i = 0; i < rhs.buckets.size(); i++) {
      *this += (c * rhs.buckets[i]);
      normalize();
      c.buckets.insert(c.buckets.begin(), 0);
    }
    return *this;
  }
};
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>_bigint</tabTrigger>
  <description>simple bigint implementation</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>
