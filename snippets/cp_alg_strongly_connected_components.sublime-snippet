<snippet>
  <!-- Example: Hello, ${1:this} is a ${2:snippet}. -->
  <content><![CDATA[
struct node;
struct edge;
using pnode = shared_ptr<node>;
using pedge = shared_ptr<edge>;
using graph = vector<pnode>;

struct node {
  bool visited;
  bool in_stack;
  int age, reachable;
  vector<pedge> forward;
  //vector<pedge> backward;
};

struct edge {
  pnode from, to;
};

void connect(pnode a, pnode b) {
  pedge e = make_shared<edge>();
  e->from = a; e->to = b;
  a->forward.emplace_back(e);
  //b->backward.emplace_back(e);
}

void scc_dfs(pnode u, int& age, stack<pnode>& s) {
  age++;
  u->age = u->reachable = age;
  u->visited = true;
  s.push(u);
  u->in_stack = true;
  for (auto e : u->forward) {
    auto v = e->to;
    if (!v->visited) scc_dfs(v, age, s);
    if (v->in_stack) u->reachable = min(u->reachable, v->reachable);
  }
  if (u->age == u->reachable) {
    while (true) {
      // TODO
      auto v = s.top(); s.pop();
      v->in_stack = false;
      if (u == v) break;
    }
  }
}

void find_scc(graph& g) {
  int age = 0;
  for (auto u : g) {
    if (u->visited) continue;
    stack<pnode> s;
    scc_dfs(u, age, s);
  }  
}
]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>_strongly_connected_components</tabTrigger>
  <description>Tarjan SCC</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.c++</scope>
</snippet>
